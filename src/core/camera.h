#ifndef CAMERA_H
#define CAMERA_H 1

#include "rt3.h"
#include "ray.h"
#include "film.h"

namespace rt3{

// The role of the camera in a RT is to generate the rays that must interact with the scene.
class Camera{
    private:
    
    // Camera Frame: [e, (u,v,w)]
    Point3f e; //!< Origin (look_from)
    Vector3f u; //!< --> normalize( cross( vup, w ) )
    Vector3f v; //!< --> normalize( cross ( w, u ) )
    Vector3f w; //!< The gaze of the camera. --> normalize(look_at - look_from)

    std::vector<real_type> screen_window = {-1, 1, -1, 1}; //!< The dimensions of the screen space (left, right, bottom and top)

    public:
    Film film; //!< Represents an image generated by the ray tracer, stored in the camera

    Camera(Point3f look_from, Point3f look_at, Point3f up, Film film, real_type l, real_type r,real_type b,real_type t):
    screen_window{l,r,b,t},film{film.m_full_resolution, film.m_filename, film.m_image_type, film.m_vcrop}
    {
        Vector3f gaze = look_at - look_from; w = glm::normalize(gaze); // left-hand orientation
        u = glm::normalize( glm::cross( up, w ) ); // The order inside cross matters.
        v = glm::normalize( glm::cross ( w, u ) );
        e = look_from;
    }
    virtual ~Camera(){ /* empty */ };

    virtual Ray generate_ray(int x, int y);
};


class PerspectiveCamera : public Camera {
    // TODO: Add members and methods here
    private:

    float fovy; //!< The angle of the camera's view
    public:
	Ray generate_ray(int x, int y);

    PerspectiveCamera(Point3f look_from, Point3f look_at, Point3f up, Film film, real_type l, real_type r,real_type b,real_type t):
    Camera(look_from, look_at, up, film, l, r, b, t)
    {/*empty*/};
    virtual ~PerspectiveCamera(){ /* empty */ };
};


class OrthographicCamera : public Camera {
    // TODO: Add members and methods here
    public:
	Ray generate_ray(int x, int y);

    OrthographicCamera(Point3f look_from, Point3f look_at, Point3f up, Film film, real_type l, real_type r,real_type b,real_type t):
    Camera(look_from, look_at, up, film, l, r, b, t)
    {/*empty*/};

    virtual ~OrthographicCamera(){ /* empty */ };
};

//-------------------------------------------------------------------------------
} // namespace rt3

#endif